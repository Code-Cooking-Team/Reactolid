/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useMeshBody } from '+hooks/useMeshBody'
import { useGLTF } from '@react-three/drei'
import React, { useRef } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import gltfUrl from './rock.gltf?url'

type GLTFResult = GLTF & {
    nodes: {
        rock001: THREE.Mesh
    }
    materials: {
        rockMaterial: THREE.MeshStandardMaterial
    }
}

export function Rock({ ...props }: JSX.IntrinsicElements['group']) {
    const gltf = useGLTF(gltfUrl) as GLTFResult
    const { nodes, materials } = gltf

    const [ref] = useMeshBody({ gltf, type: 'Dynamic' })

    return (
        <group ref={ref} {...props} dispose={null}>
            <group name="Scene">
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.rock001.geometry}
                    material={materials.rockMaterial}
                    userData={{ name: 'rock.001' }}
                />
            </group>
        </group>
    )
}

useGLTF.preload(gltfUrl)
